[Template]
Release = @Release | 1.4.3 | String | Template Release
Date = @Date | 13 August 2009 | String | Date
Author = @Author | Kel Solaar | String | Author
EMail = @Email | kelsolaar_fool@hotmail.com | String | Email
Url = @Url | http://my.opera.com/KelSolaar/blog/ | String | Url
Software = @Software | XSI | String | Software
Version = @Version | 7.X | String | Version
OutputScript = @OutputScript | sIBL_XSI_MR_Import.js | String | Output Script
Comment = @Comment | This is XSI 7.X Mental Ray Template. | String | Comment

[sIBL File Attributes]
Background|BGfile = @BGfile
Enviroment|EVfile = @EVfile
Enviroment|EVmulti = @EVmulti
Enviroment|EVgamma = @EVgamma
Reflection|REFfile = @REFfile
Reflection|REFmulti = @REFmulti
Reflection|REFgamma = @REFgamma
Sun|SUNu = @SUNu
Sun|SUNv = @SUNv
Sun|SUNcolor = @SUNcolor
Sun|SUNmulti = @SUNmulti
Header|Height = @Height
Header|North = @North
Lights|DynamicLights = @dynamicLights

[Common Attributes]
createBackground = @createBackground | 1 | Boolean | Create / Update Background
createLighting = @createLighting | 1 | Boolean | Create / Update Lighting
createReflection = @createReflection | 1 | Boolean | Create / Update Reflection
createSun = @createSun | 1 | Boolean | Create / Update Sun
createLights = @createLights | 1 | Boolean | Create Dynamic Lights

[Additional Attributes]
createFeedBack = @createFeedBack | 1 | Boolean | Create Feedback
feedbackRadius = @feedbackRadius | 1000 | Float | Feedback Radius
createGround = @createGround | 1 | Boolean | Create Ground
shadowCatcher = @shadowCatcher | 1 | Boolean | Ground Shadow Catcher
hideLights = @hideLights | 1 | Boolean | Hide Lights
physicalSun = @physicalSun | 1 | Boolean | Physical Sun
activateFinalGather = @activateFinalGather | 1 | Boolean | Activate Final Gather
activateColorManagement = @activateColorManagement | 1 | Boolean | Activate Color Management
showPassesDialog = @showPassesDialog | 0 | Boolean | Passes Selection Dialog
updateScene = @updateScene | 0 | Boolean | Update Scene
overrideTweaks = @overrideTweaks | 0 | Boolean | Override User Tweaks

[Remote Connection]
ConnectionType = @ConnectionType | Socket | String | Connection Type
ExecutionCommand = @ExecutionCommand | $loaderScriptPath | String | ExecutionCommand
DefaultAddress = @DefaultAddress | 127.0.0.1 | Integer | Default Address
DefaultPort = @DefaultPort | 12288 | Integer | Default Port

[Script]
// @OutputScript - @Release For @Software @Version
// Author : @Author
// EMail : @Email
// Homepage : @Url
// Template Last Modified : @Date
// sIBL_Framework
var cBackgroundFilePath = "@BGfile";
var cLightingFilePath = "@EVfile";
var lightingMultiplier = @EVmulti;
var lightingGamma = @EVgamma;
var cReflectionFilePath = "@REFfile";
var reflectionMultiplier = @REFmulti;
var reflectionGamma = @REFgamma;
var sunU = @SUNu;
var sunV = @SUNv;
var sunColor = [@SUNcolor];
var sunMultiplier = @SUNmulti;
var Height = @Height;
var North = @North;
var dynamicLights = "@dynamicLights";
var createBackground = @createBackground;
var createLighting = @createLighting;
var createReflection = @createReflection;
var createSun = @createSun;
var createLights = @createLights;
var createFeedBack = @createFeedBack;
var feedbackRadius = @feedbackRadius;
var createGround = @createGround;
var shadowCatcher = @shadowCatcher;
var hideLights = @hideLights;
var physicalSun = @physicalSun;
var activateFinalGather = @activateFinalGather;
var activateColorManagement = @activateColorManagement;
var showPassesDialog = @showPassesDialog;
var updateScene = @updateScene;
var overrideTweaks = @overrideTweaks;

sIBL_XSI_MR_Setup(cBackgroundFilePath,
		cLightingFilePath,
		lightingMultiplier,
		lightingGamma,
		cReflectionFilePath,
		reflectionMultiplier,
		reflectionGamma,
		sunU,
		sunV,
		sunColor,
		sunMultiplier,
		Height,
		North,
		dynamicLights,
		createBackground,
		createLighting,
		createReflection,
		createSun,
		createLights,
		createFeedBack,
		createGround,
		shadowCatcher,
		feedbackRadius,
		hideLights,
		physicalSun,
		activateFinalGather,
		activateColorManagement,
		showPassesDialog,
		updateScene,
		overrideTweaks);

function sIBL_XSI_MR_Setup(cBackgroundFilePath,
			cLightingFilePath,
			lightingMultiplier,
			lightingGamma,
			cReflectionFilePath,
			reflectionMultiplier,
			reflectionGamma,
			sunU,
			sunV,
			sunColor,
			sunMultiplier,
			Height,
			North,
			dynamicLights,
			createBackground,
			createLighting,
			createReflection,
			createSun,
			createLights,
			createFeedBack,
			createGround,
			shadowCatcher,
			feedbackRadius,
			hideLights,
			physicalSun,
			activateFinalGather,
			activateTonemapping,
			showPassesDialog,
			updateScene,
			overrideTweaks)
{
	try
	{
		var cSelectedPassesList = [];

		if (showPassesDialog)
		{
			cSelectedPassesList = sIBL_XSI_MR_GetPassesList();
		}
		else
		{
			cSelectedPassesList[0] = GetCurrentPass();
		}

		if(cSelectedPassesList != null)
		{

			if (cSelectedPassesList.length != 0)
			{
				var cProgressBar = XSIUIToolkit.ProgressBar;
				cProgressBar.Maximum = 100;
				cProgressBar.CancelEnabled = false;

				// Defines Sun And Dynamic Lights Existence From sIBL File.
				if (sunU != -1 && sunV != -1)
					var sunExists = true;
				else
					var sunExists = false;

				if ( dynamicLights != -1 )
					var dynamicLightsExists = true
				else
					var dynamicLightsExists = false

				if (updateScene)
				{
					Application.LogMessage("sIBL_GUI | Starting sIBL Related Nodes Update !");
					cProgressBar.Caption = "sIBL_GUI | Updating Scene !";

					var cSIBL_Group = sIBL_XSI_MR_GetMatchingObjectsByClassID("{5FC0CCAE-3DC8-11D0-9449-00AA006D3165}", "sIBL", true);
					cSIBL_Group = cSIBL_Group(0);

					if (cSIBL_Group != null)
					{
						sIBL_XSI_MR_ScriptEditorVerbose(false);
						sIBL_XSI_MR_AutoInspectState(false);

						cProgressBar.Step = 16.666;
						cProgressBar.Visible = true;

						// Scene Cleanup.
						sIBL_XSI_MR_Update_EnvironmentDeletion(overrideTweaks, createBackground, createLighting, createReflection, createSun, createLights, sunExists, dynamicLightsExists, createGround)
						cProgressBar.Increment();

						// Environment Shaders Update.
						sIBL_XSI_MR_Update_EnvironmentShaders(createBackground, createLighting, createReflection, cBackgroundFilePath, cLightingFilePath, cReflectionFilePath, cSelectedPassesList, overrideTweaks);
						cProgressBar.Increment();

						// Feedback Update.
						if (overrideTweaks)
							sIBL_XSI_MR_Update_Feedback(feedbackRadius, createBackground, createFeedBack);
						cProgressBar.Increment();

						// Sun Update.
						if (sunExists)
						{
							if (createSun)
							{
								sIBL_XSI_MR_Update_Sun(sunU, sunV, sunColor, sunMultiplier, feedbackRadius, overrideTweaks);
							}
						}
						cProgressBar.Increment();

						// Dynamic Lights Update.
						if (dynamicLightsExists)
						{
							if (createLights)
							{
								sIBL_XSI_MR_Update_DynamicsLights(dynamicLights, feedbackRadius);
							}
						}
						cProgressBar.Increment();

						if (createGround)
						{
							sIBL_XSI_MR_Update_Ground(feedbackRadius, shadowCatcher, overrideTweaks);
						}
						cProgressBar.Increment();

						cProgressBar.Visible = false;
					}
					else
					{
						Application.LogMessage("sIBL_GUI | No sIBL Group Found, Aborting Scene Update !", siWarning);
					}

				}
				else
				{
					Application.LogMessage("sIBL_GUI | Starting sIBL File Import !");
					cProgressBar.Caption = "sIBL_GUI | Setting Up sIBL File !";

					sIBL_XSI_MR_ScriptEditorVerbose(false);
					sIBL_XSI_MR_AutoInspectState(false);

					cProgressBar.Step = 10;
					cProgressBar.Visible = true;

					// Scene Cleanup.
					sIBL_XSI_MR_EnvironmentDeletion();
					cProgressBar.Increment();

					// Lights Hide.
					if (hideLights)
						sIBL_XSI_MR_HideLights();
					cProgressBar.Increment();

					// Environment Shaders Creation.
					sIBL_XSI_MR_EnvironmentShadersCreation(createBackground, createLighting, createReflection, cBackgroundFilePath, cLightingFilePath, cReflectionFilePath, cSelectedPassesList);
					cProgressBar.Increment();

					// Feedback Creation.
					sIBL_XSI_MR_FeedbackCreation(feedbackRadius, createBackground, createFeedBack);
					cProgressBar.Increment();

					// Sun Creation
					if (sunExists)
					{
						if (createSun)
						{
							if (sIBL_XSI_MR_ObjectExists("sIBL_Feedback", "sIBL_GUI | No Feedback Found, Skipping Sun Creation !"))
							{
								sIBL_XSI_MR_SunCreation(sunU, sunV, sunColor, sunMultiplier, feedbackRadius);
							}
						}
					}
					cProgressBar.Increment();

					// Dynamic Lights Creation
					if (dynamicLightsExists)
					{
						if (createLights)
						{
							sIBL_XSI_MR_DynamicLightsCreation(dynamicLights, feedbackRadius);
						}
					}
					cProgressBar.Increment();

					// Shaders / Feedback Connection
					var cFeedback = Application.ActiveSceneRoot.FindChild("sIBL_Feedback");
					if (cFeedback != null)
					{
						sIBL_XSI_MR_ConnectFeedBackToSIBLShaders(cFeedback, createBackground, createLighting, createReflection, cSelectedPassesList);
					}
					cProgressBar.Increment();

					// Ground Creation
					if (createGround)
						sIBL_XSI_MR_GroundCreation(feedbackRadius, shadowCatcher);
					cProgressBar.Increment();

					// Final Gather Activation
					if (activateFinalGather)
						sIBL_XSI_MR_ActivateFinalGather(cSelectedPassesList);
					cProgressBar.Increment();

					// Linear Workflow Activation
					if (activateColorManagement)
						sIBL_XSI_MR_ActivateColorManagement(createBackground);
					cProgressBar.Increment();

					cProgressBar.Visible = false;
				}

				sIBL_XSI_MR_ScriptEditorVerbose(true);
				sIBL_XSI_MR_AutoInspectState(true);

				if(updateScene)
					Application.LogMessage("sIBL_GUI | sIBL File Update Finished !");
				else
					Application.LogMessage("sIBL_GUI | sIBL File Import Finished !");
			}
			else
			{
				sIBL_XSI_MR_ScriptEditorVerbose(true);
				sIBL_XSI_MR_AutoInspectState(true);

				Application.LogMessage("sIBL_GUI | No Pass Selected, Import Canceled !");
			}
		}
	}
	catch(e)
	{
		sIBL_XSI_MR_ScriptEditorVerbose(true);
		sIBL_XSI_MR_AutoInspectState(true);

		Application.LogMessage("sIBL_GUI | sIBL File Import Failed !", siError);
	}
}

function sIBL_XSI_MR_GetPassesList()
{
	var cPassesList = new ActiveXObject("XSI.Collection");
	cPassesList.SetAsText("Passes.List.*");

	var cSIBL_GUI_Passes_Chooser = Application.ActiveSceneRoot.AddCustomProperty("sIBL_GUI_Passes_Chooser", false );

	var cPassParameters = []
	for(var i = 0; i < cPassesList.count; i++)
	{
		cPassParameters[i] = cSIBL_GUI_Passes_Chooser.AddParameter3(cPassesList.item(i).name, siBool, true);
	}

	var cSIBL_GUI_Passes_Chooser_Layout = cSIBL_GUI_Passes_Chooser.PPGLayout;

	cSIBL_GUI_Passes_Chooser_Layout.AddGroup("Scene Passes");
		for(var i = 0; i < cPassesList.count; i++)
		{
			cSIBL_GUI_Passes_Chooser_Layout.AddItem(cPassesList.item(i).name);
		}
	cSIBL_GUI_Passes_Chooser_Layout.EndGroup();
	cSIBL_GUI_Passes_Chooser_Layout.AddRow();
		cSIBL_GUI_Passes_Chooser_Layout.AddGroup("", false, 100);
		cSIBL_GUI_Passes_Chooser_Layout.EndGroup();
		cSIBL_GUI_Passes_Chooser_Layout.AddGroup("Options");
				var cButton = cSIBL_GUI_Passes_Chooser_Layout.AddButton("ToggleAll", "Toggle All");
				cButton.SetAttribute(siUICX, 96)
				cButton = cSIBL_GUI_Passes_Chooser_Layout.AddButton("UnToggleAll", "UnToggle All");
				cButton.SetAttribute(siUICX, 96)
		cSIBL_GUI_Passes_Chooser_Layout.EndGroup();
	cSIBL_GUI_Passes_Chooser_Layout.EndRow();

	cSIBL_GUI_Passes_Chooser_Layout.Logic = ToggleAll_OnClicked.toString() + UnToggleAll_OnClicked.toString();
	cSIBL_GUI_Passes_Chooser_Layout.Language = "JScript";

	var cReturnValue = InspectObj( cSIBL_GUI_Passes_Chooser, "", "sIBL GUI Passes Chooser", siModal, false );

	if (!cReturnValue)
	{
		var cSelectedPassesList = [];
		for (var i = 0; i < cPassParameters.length; i++)
		{
			if (cPassParameters[i].value == true)
			{
				cSelectedPassesList[cSelectedPassesList.length] = "Passes." + cPassParameters[i].name;
			}
		}
		sIBL_XSI_MR_DeleteRequestedProperties("sIBL_GUI_Passes_Chooser");
		return cSelectedPassesList;
	}
	else
	{
		sIBL_XSI_MR_DeleteRequestedProperties("sIBL_GUI_Passes_Chooser");
		return null;
	}
}

function ToggleAll_OnClicked()
{
	// Starting At 1 To Ignore The PPG Name.
	for(var i = 1; i < PPG.Inspected.Item(0).Parameters.count; i++)
	{
		var cBoolean = "True";
		PPG.Inspected.Item(0).Parameters(i).value = cBoolean;
	}
}

function UnToggleAll_OnClicked()
{
	// Starting At 1 To Ignore The PPG Name.
	for(var i = 1; i < PPG.Inspected.Item(0).Parameters.count; i++)
	{
		var cBoolean = "False";
		PPG.Inspected.Item(0).Parameters(i).value = cBoolean;
	}
}

function sIBL_XSI_MR_HideLights()
{
	var lightsList = Application.ActiveSceneRoot.FindChildren("", siLightPrimType);
	for (var i = 0; i < lightsList.count; i++)
	{
		lightsList(i).Properties("visibility").Parameters("viewvis").value = 0;
		lightsList(i).Properties("visibility").Parameters("rendvis").value = 0;
	}
}

function sIBL_XSI_MR_Update_EnvironmentDeletion(overrideTweaks, createBackground, createLighting, createReflection, createSun, createLights, sunExists, dynamicLightsExists, createGround)
{
	try
	{
		// sIBL Clip Shaders Deletion.
		if (overrideTweaks)
		{
			if (!createLighting)
				DeleteObj(sIBL_XSI_MR_GetMatchingObjectsByClassID("{22C3E8F8-CCEA-11D2-B35B-00105A1E70DE}", "sIBL_Lighting_Clip", true));
			if (!createReflection)
				DeleteObj(sIBL_XSI_MR_GetMatchingObjectsByClassID("{22C3E8F8-CCEA-11D2-B35B-00105A1E70DE}", "sIBL_Reflection_Clip", true));
		}

		// sIBL Environment Shaders Deletion.
		if (overrideTweaks)
		{
			if(!createBackground)
				DeleteObj(sIBL_XSI_MR_GetMatchingObjectsByClassID("{AD97C8B1-E1AE-4E3B-ABF5-1754616A6B63}", "sIBL_Background_Environment", true));
			if(!createLighting){}
				DeleteObj(sIBL_XSI_MR_GetMatchingObjectsByClassID("{AD97C8B1-E1AE-4E3B-ABF5-1754616A6B63}", "sIBL_Lighting_Environment", true));
			if(!createReflection)
				DeleteObj(sIBL_XSI_MR_GetMatchingObjectsByClassID("{AD97C8B1-E1AE-4E3B-ABF5-1754616A6B63}", "sIBL_Reflection_Environment", true));
		}

		if (overrideTweaks)
		{
			if(!createSun)
				DeleteObj(sIBL_XSI_MR_GetMatchingObjectsByClassID("{5FC0CCAE-3DC8-11D0-9449-00AA006D3165}", "sIBL_Sun", true));
		}

		if (overrideTweaks)
		{
			if(!createLights)
				DeleteObj(sIBL_XSI_MR_GetMatchingObjectsByClassID("{5FC0CCAE-3DC8-11D0-9449-00AA006D3165}", "sIBL_DKL_", false));
		}

		if (overrideTweaks)
		{
			if(!createGround)
				DeleteObj(sIBL_XSI_MR_GetMatchingObjectsByClassID("{5FC0CCAE-3DC8-11D0-9449-00AA006D3165}", "sIBL_Ground", true));
		}
	}
	catch (e)
	{
	}
}

function sIBL_XSI_MR_EnvironmentDeletion()
{
	try
	{
		// sIBL Transform Group Deletion.
		var sceneSIBLGroup = Application.ActiveSceneRoot.FindChild("sIBL");
		if (sceneSIBLGroup != null)
		{
			Application.DeleteObj("B:sIBL");
		}

		// sIBL Raytype Shader Deletion.
		DeleteObj(sIBL_XSI_MR_GetMatchingObjectsByClassID("{8604221E-BCFA-11D1-90E9-0000F804EB21}", "sIBL", false));

		// sIBL Clip Shaders Deletion.
		DeleteObj(sIBL_XSI_MR_GetMatchingObjectsByClassID("{22C3E8F8-CCEA-11D2-B35B-00105A1E70DE}", "sIBL", false));

		// sIBL Environment Shaders Deletion.
		DeleteObj(sIBL_XSI_MR_GetMatchingObjectsByClassID("{AD97C8B1-E1AE-4E3B-ABF5-1754616A6B63}", "sIBL", false));

		// sIBL Color Boolean Switch Shaders Deletion.
		DeleteObj(sIBL_XSI_MR_GetMatchingObjectsByClassID("{85C16046-BCFA-11D1-90E9-0000F804EB21}", "sIBL", false));

		// sIBL Feedback Materials Deletion.
		DeleteObj(sIBL_XSI_MR_GetMatchingObjectsByClassID("{4C4F7500-51EF-11D0-854E-00A02417D029}", "sIBL", false));

		// sIBL Feedback Shaders Deletion.
		DeleteObj(sIBL_XSI_MR_GetMatchingObjectsByClassID("{5B003A9D-868A-11D4-9330-00E0293D48C6}", "sIBL", false));
		
		// sIBL Ground mip_Matte_Shadow Deletion.
		DeleteObj(sIBL_XSI_MR_GetMatchingObjectsByClassID("{C08B33D2-52EB-4820-BA30-AAC7F75325F0}", "sIBL", false));
	}
	catch (e)
	{
	}
}

function sIBL_XSI_MR_CreateEnvironmentShaderBranch(cPass, cInputShader, cImageSource, connectionPorts, cName)
{
	var cEnvironmentShader = CreateShaderFromPreset("Shaders/Environment/Environment.Preset", cPass, "");
	SIConnectShaderToCnxPoint(cImageSource, cEnvironmentShader.tex, false);
	
	var cColorBooleanSwitchShader = CreateShaderFromPreset("$XSI_DSPRESETS/Shaders/Texture/Switch/Color_Boolean_Switch.Preset", cPass, "");
	SIConnectShaderToCnxPoint(cEnvironmentShader, cColorBooleanSwitchShader + ".input1", false);
	
	for (var i = 0; i < connectionPorts.length; i++)
	{
		SIConnectShaderToCnxPoint(cColorBooleanSwitchShader, cInputShader + "." + connectionPorts[i], false);
	}
	
	cColorBooleanSwitchShader.Parameters("name").value = cName + "_Switch";
	cEnvironmentShader.Parameters("name").value = cName + "_Environment";
}

function sIBL_XSI_MR_Update_EnvironmentShaders(createBackground, createLighting, createReflection, cBackgroundFilePath, cLightingFilePath, cReflectionFilePath, cSelectedPassesList, overrideTweaks)
{
	var cPass = cSelectedPassesList[0];

	var cRaytype = sIBL_XSI_MR_GetMatchingObjectsByClassID("{8604221E-BCFA-11D1-90E9-0000F804EB21}", "sIBL_Raytype", true);
	cRaytype = cRaytype(0);

	if (cRaytype != null)
	{
		var cPorts = ["eye"];
		if (createBackground)
		{
			var cBackgroundSource = sIBL_XSI_MR_GetMatchingObjectsByClassID("{22C3E8F8-CCEA-11D2-B35B-00105A1E70DE}", "sIBL_Background_Clip", true);
			if(cBackgroundSource != 0)
			{
				cBackgroundSource = cBackgroundSource(0);
				cBackgroundSource.Source.Parameters("FileName").Value = cBackgroundFilePath;
			}
			else
			{
				cBackgroundSource = Application.CreateImageClip2(cBackgroundFilePath, "sIBL_Background_Clip");
			}

			var cBackgroundEnvironmentShader = sIBL_XSI_MR_GetMatchingObjectsByClassID("{AD97C8B1-E1AE-4E3B-ABF5-1754616A6B63}", "sIBL_Background_Environment", true);
			if(cBackgroundEnvironmentShader == 0)
			{
				sIBL_XSI_MR_CreateEnvironmentShaderBranch(cPass, cRaytype, cBackgroundSource, cPorts, "sIBL_Background");
			}
		}
		else
		{
			if(overrideTweaks)
			{
				cRaytype.Parameters("eye").Parameters("red").value = 0;
				cRaytype.Parameters("eye").Parameters("green").value = 0;
				cRaytype.Parameters("eye").Parameters("blue").value = 0;
			}
		}

		cPorts = ["fg", "photon"];
		if (createLighting)
		{
			var cLightingSource = sIBL_XSI_MR_GetMatchingObjectsByClassID("{22C3E8F8-CCEA-11D2-B35B-00105A1E70DE}", "sIBL_Lighting_Clip", true);
			if(cLightingSource != 0)
			{
				cLightingSource = cLightingSource(0);
				cLightingSource.Source.Parameters("FileName").Value = cLightingFilePath;
			}
			else
			{
				cLightingSource = Application.CreateImageClip2(cLightingFilePath, "sIBL_Lighting_Clip");
			}

			var cLightingEnvironmentShader = sIBL_XSI_MR_GetMatchingObjectsByClassID("{AD97C8B1-E1AE-4E3B-ABF5-1754616A6B63}", "sIBL_Lighting_Environment", true);
			if(cLightingEnvironmentShader == 0)
			{
				sIBL_XSI_MR_CreateEnvironmentShaderBranch(cPass, cRaytype, cLightingSource, cPorts, "sIBL_Lighting");
			}
		}
		else
		{
			if(overrideTweaks)
			{
				for (var i = 0; i < cPorts.length; i++)
				{
					cRaytype.Parameters(cPorts[i]).Parameters("red").value = 0;
					cRaytype.Parameters(cPorts[i]).Parameters("green").value = 0;
					cRaytype.Parameters(cPorts[i]).Parameters("blue").value = 0;
				}
			}
		}

		cPorts = ["reflection", "refraction"];
		if (createReflection)
		{
			var cReflectionSource = sIBL_XSI_MR_GetMatchingObjectsByClassID("{22C3E8F8-CCEA-11D2-B35B-00105A1E70DE}", "sIBL_Reflection_Clip", true);
			if(cReflectionSource != 0)
			{
				cReflectionSource = cReflectionSource(0);
				cReflectionSource.Source.Parameters("FileName").Value = cReflectionFilePath;
			}
			else
			{
				cReflectionSource = Application.CreateImageClip2(cReflectionFilePath, "sIBL_Reflection_Clip");
			}

			var cReflectionEnvironmentShader = sIBL_XSI_MR_GetMatchingObjectsByClassID("{AD97C8B1-E1AE-4E3B-ABF5-1754616A6B63}", "sIBL_Reflection_Environment", true);
			if(cReflectionEnvironmentShader == 0)
			{
				sIBL_XSI_MR_CreateEnvironmentShaderBranch(cPass, cRaytype, cReflectionSource, cPorts, "sIBL_Reflection");
			}
		}
		else
		{
			if(overrideTweaks)
			{
				for (var i = 0; i < cPorts.length; i++)
				{
					cRaytype.Parameters(cPorts[i]).Parameters("red").value = 0;
					cRaytype.Parameters(cPorts[i]).Parameters("green").value = 0;
					cRaytype.Parameters(cPorts[i]).Parameters("blue").value = 0;
				}
			}
		}

		// Connecting The Raytype Shader To Passes.
		for (var i = 0; i < cSelectedPassesList.length; i++)
		{
			Application.LogMessage(cSelectedPassesList[i]) + + ".EnvironmentShaderStack";
			SIConnectShaderToCnxPoint(cRaytype, cSelectedPassesList[i] + ".EnvironmentShaderStack", false);
		}
	}
	else
	{
		Application.LogMessage("sIBL_GUI | No sIBL_Raytype Found, Skipping Environment Related Shaders Updates !", siWarning);
	}
}

function sIBL_XSI_MR_EnvironmentShadersCreation(createBackground, createLighting, createReflection, cBackgroundFilePath, cLightingFilePath, cReflectionFilePath, cSelectedPassesList)
{
	var cPass = cSelectedPassesList[0];

	var cRaytype = CreateShaderFromPreset("Shaders/Texture/Switch/Ray_Type.Preset", cPass);

	cRaytype.Parameters("enable_fg").value = 1;
	cRaytype.Parameters("shadow").Parameters("red").value = 0;
	cRaytype.Parameters("shadow").Parameters("green").value = 0;
	cRaytype.Parameters("shadow").Parameters("blue").value = 0;

	SIConnectShaderToCnxPoint(cRaytype, cPass + ".EnvironmentShaderStack", false);

	var cPorts = ["eye", "refraction"];
	if (createBackground)
	{
		var cBackgroundSource = Application.CreateImageClip2(cBackgroundFilePath, "sIBL_Background_Clip");
		sIBL_XSI_MR_CreateEnvironmentShaderBranch(cPass, cRaytype, cBackgroundSource, cPorts, "sIBL_Background");
	}
	else
	{
		cRaytype.Parameters("eye").Parameters("red").value = 0;
		cRaytype.Parameters("eye").Parameters("green").value = 0;
		cRaytype.Parameters("eye").Parameters("blue").value = 0;
	}

	cPorts = ["fg", "photon"];
	if (createLighting)
	{
		var cLightingSource = Application.CreateImageClip2(cLightingFilePath, "sIBL_Lighting_Clip");
		sIBL_XSI_MR_CreateEnvironmentShaderBranch(cPass, cRaytype, cLightingSource, cPorts, "sIBL_Lighting");
	}
	else
	{
		for (var i = 0; i < cPorts.length; i++)
		{
			cRaytype.Parameters(cPorts[i]).Parameters("red").value = 0;
			cRaytype.Parameters(cPorts[i]).Parameters("green").value = 0;
			cRaytype.Parameters(cPorts[i]).Parameters("blue").value = 0;
		}
	}

	cPorts = ["reflection"];
	if (createReflection)
	{
		var cReflectionSource = Application.CreateImageClip2(cReflectionFilePath, "sIBL_Reflection_Clip");
		sIBL_XSI_MR_CreateEnvironmentShaderBranch(cPass, cRaytype, cReflectionSource, cPorts, "sIBL_Reflection");
	}
	else
	{
		for (var i = 0; i < cPorts.length; i++)
		{
			cRaytype.Parameters(cPorts[i]).Parameters("red").value = 0;
			cRaytype.Parameters(cPorts[i]).Parameters("green").value = 0;
			cRaytype.Parameters(cPorts[i]).Parameters("blue").value = 0;
		}
	}

	// Connecting The Raytype Shader To Others Passes.
	for (var i = 1; i < cSelectedPassesList.length; i++)
	{
		SIConnectShaderToCnxPoint(cRaytype, cSelectedPassesList[i] + ".EnvironmentShaderStack", false);
	}

	cRaytype.Parameters("name").value = "sIBL_Raytype";
}

function sIBL_XSI_MR_GetSIBLGroup()
{
	var sceneSIBLGroup = Application.ActiveSceneRoot.FindChild("sIBL");

	if (sceneSIBLGroup == null)
	{
		var cNull = ActiveSceneRoot.AddPrimitive("Null", "helperNull");
		var sceneSIBLGroup = Application.CreateTransformGroup("sIBL", "B:" + cNull);

		var lockList = ["sclx", "scly", "sclz", "rotx", "roty", "rotz", "posx", "posy", "posz"];
		var cGlobalKinematics = sceneSIBLGroup.Kinematics.Global.Parameters;

		for (var i = 0; i < lockList.length; i++)
		{
			cGlobalKinematics(lockList[i]).SetLock(siLockLevelManipulation);
		}

		cLocalKinematics = sceneSIBLGroup.Kinematics.Local.Parameters;

		for (var i = 0; i < lockList.length; i++)
		{
			cLocalKinematics(lockList[i]).SetLock(siLockLevelManipulation);
		}

		DeleteObj(cNull);
	}

	return sceneSIBLGroup
}

function sIBL_XSI_MR_FeedbackGeometryCreation(feedbackRadius, createFeedBack)
{
	var cFeedback = ActiveSceneRoot.AddGeometry("Sphere", "NurbsSurface", "sIBL_Feedback");
	cFeedback.properties("visibility").Parameters("rendvis").value = 0;

	if (!createFeedBack)
		cFeedback.properties("visibility").Parameters("viewvis").value = 0;

	CreateProjection(cFeedback, siTxtUV, siTxtDefaultPlanarXY, null, "sIBL_Texture_Projection");

	var cGlobalKinematics = cFeedback.Kinematics.Global.Parameters;
	cGlobalKinematics("sclx").value = -feedbackRadius;
	cGlobalKinematics("scly").value = feedbackRadius;
	cGlobalKinematics("sclz").value = feedbackRadius;

	//ResetTransform(cFeedback, siCtr, siSRT, siXYZ);

	ApplyTopoOp("Inverse", cFeedback, 3, siImmediateOperation);

	var lockList = ["rotx", "rotz", "posx", "posy", "posz"];
	for (var i = 0; i < lockList.length; i++)
	{
		cGlobalKinematics(lockList[i]).SetLock(siLockLevelManipulation);
	}

	cLocalKinematics = cFeedback.Kinematics.Local.Parameters;

	for (var i = 0; i < lockList.length; i++)
	{
		cLocalKinematics(lockList[i]).SetLock(siLockLevelManipulation);
	}

	return cFeedback;
}

function sIBL_XSI_MR_Update_Feedback(feedbackRadius, createBackground, createFeedBack)
{
	var cFeedback = sIBL_XSI_MR_GetMatchingObjectsByClassID("{5FC0CCAE-3DC8-11D0-9449-00AA006D3165}", "sIBL_Feedback", true);

	if (cFeedback == 0 && overrideTweaks)
	{
		sIBL_XSI_MR_FeedbackCreation(feedbackRadius, createBackground, createFeedBack);
	}
	else
	{
		cFeedback = cFeedback(0);
		if (cFeedback != null)
		{
			var cGlobalKinematics = cFeedback.Kinematics.Global.Parameters;
			cGlobalKinematics("roty").value = 0;

			//Not Working After The Feedback Has Been Frozen.
			//cGlobalKinematics("sclx").value = -feedbackRadius;
			//cGlobalKinematics("scly").value = feedbackRadius;
			//cGlobalKinematics("sclz").value = feedbackRadius;

			if (!createFeedBack)
				cFeedback.properties("visibility").Parameters("viewvis").value = 0;
			else
				cFeedback.properties("visibility").Parameters("viewvis").value = 1;
		}
		else
		{
			Application.LogMessage("sIBL_GUI | No Feedback Found, Skipping Feedback Related Updates !", siWarning);
		}
	}
}

function sIBL_XSI_MR_FeedbackCreation(feedbackRadius, createBackground, createFeedBack)
{
	var sIBLGroup = sIBL_XSI_MR_GetSIBLGroup();
	var cFeedback = sIBL_XSI_MR_FeedbackGeometryCreation(feedbackRadius, createFeedBack);

	sIBLGroup.AddChild(cFeedback);

	var cFeedbackMaterial = SICreateMaterial("Shaders/Material/Constant.Preset", "sIBL_Feedback_Material", null, null, false);

	cFeedbackMaterial.Parameters("Surface").NestedObjects(0).Parameters("transparency").Parameters("red").value = 0.5;
	cFeedbackMaterial.Parameters("Surface").NestedObjects(0).Parameters("transparency").Parameters("green").value = 0.5;
	cFeedbackMaterial.Parameters("Surface").NestedObjects(0).Parameters("transparency").Parameters("blue").value = 0.5;

	AssignMaterial(cFeedbackMaterial + "," + cFeedback);
	if(createBackground)
		SIConnectShaderToCnxPoint("Clips.sIBL_Background_Clip", cFeedbackMaterial + ".sIBL_Feedback_Material.color");

	return cFeedback
}

function sIBL_XSI_MR_Update_LightsConstraints( cLight, cScale, cU, cV )
{
	var cGlobalKinematics = cLight.Kinematics.Global.Parameters;

	cGlobalKinematics("sclx").value = cScale;
	cGlobalKinematics("scly").value = cScale;
	cGlobalKinematics("sclz").value = cScale;

	var constraintslist = cLight.Kinematics.Constraints;

	for (var k = 0; k < constraintslist.Count; k++)
	{
		var cConstraint = constraintslist(k);
		if (cConstraint.Type == "surfcns")
		{
			// U -> V & V -> U Because Of The Invert Normal.
			cConstraint.Parameters("posu").Value = 0.5 + (0.5 - cV);
			cConstraint.Parameters("posv").Value = cU;
		}
		if (cConstraint.Type == "dircns")
		{
			cConstraint.Parameters("dirx").Value = 0;
			cConstraint.Parameters("dirz").Value = -1;
		}
	}
}
function sIBL_XSI_MR_Update_Sun(sunU, sunV, sunColor, sunMultiplier, feedbackRadius, overrideTweaks)
{
    var cSun = sIBL_XSI_MR_GetMatchingObjectsByClassID("{5FC0CCAE-3DC8-11D0-9449-00AA006D3165}", "sIBL_Sun", true);

    if (cSun == 0 && overrideTweaks)
    {
        if (sIBL_XSI_MR_ObjectExists("sIBL_Feedback", "sIBL_GUI | No Feedback Found, Skipping Sun Creation !"))
        {
            sIBL_XSI_MR_SunCreation(sunU, sunV, sunColor, sunMultiplier, feedbackRadius);
        }
    }
    else
    {
        cSun = cSun(0);
        if (cSun != null)
        {
            sIBL_XSI_MR_Update_LightsConstraints(cSun, feedbackRadius / 10, sunU, sunV)
        }
        else
        {
            Application.LogMessage("sIBL_GUI | No Sun Found, Skipping Sun Related Updates !", siWarning);
        }
    }
}

function sIBL_XSI_MR_Update_DynamicsLights(dynamicLights, feedbackRadius)
{
    var cSceneDynamicLights = sIBL_XSI_MR_GetMatchingObjectsByClassID("{5FC0CCAE-3DC8-11D0-9449-00AA006D3165}", "sIBL_DKL_", false);

    if (cSceneDynamicLights == 0 && overrideTweaks)
    {
    		if (sIBL_XSI_MR_ObjectExists("sIBL_Feedback", "sIBL_GUI | No Feedback Found, Skipping Dynamic Lights Creation !"))
    		{
    			sIBL_XSI_MR_DynamicLightsCreation(dynamicLights, feedbackRadius);
    		}
    }
    else
    {
		var dynamicLights = dynamicLights.split("|");

        for (var i = 0; i < cSceneDynamicLights.Count; i++)
        {
            for (var j = 0; j < dynamicLights.length; j += 8)
            {
				var regexPattern = new RegExp(dynamicLights[j + 1].replace(/\s/g, "_"));

                if (cSceneDynamicLights(i).name.match(regexPattern))
				{
					sIBL_XSI_MR_Update_LightsConstraints( cSceneDynamicLights(i), feedbackRadius / 15, dynamicLights[j + 6], dynamicLights[j + 7] )
				}
            }
        }
    }
}

function sIBL_XSI_MR_GetLight( cParent, cConstraintParent, cLightType, cLightName, cScale, physicalSun, cIntensity, cColor, cU, cV )
{
	var cLight = ActiveSceneRoot.AddPrimitive(cLightType +".Preset", cLightName);
	cParent.AddChild(cLight);

	var cGlobalKinematics = cLight.Kinematics.Global.Parameters;
	cGlobalKinematics("sclx").value = cScale;
	cGlobalKinematics("scly").value = cScale;
	cGlobalKinematics("sclz").value = cScale;

	if (physicalSun)
	{
		cPhysicalSunShader = CreateShaderFromPreset("Shaders/Light/mental images/mia_Physical_Sun.Preset", cLight + ".light", "");
		SIConnectShaderToCnxPoint(cPhysicalSunShader, cLight + ".light.LightShader", false);
		SIConnectShaderToCnxPoint(cPhysicalSunShader, cLight + ".light.PhotonShader", false);
		cPhysicalSunShader.Parameters("mulitplier").value = cIntensity / 100;

		DisconnectAndDeleteOrUnnestShaders(cLight + ".light.soft_light", cLight + ".light");
	}
	else
	{
		cLight.Primitives("light").Parameters("LightShader").NestedObjects(0).Parameters("intensity").value = cIntensity;
		cLight.Primitives("light").Parameters("LightShader").NestedObjects(0).Parameters("color").Parameters("red").value = cColor[0] / 255;
		cLight.Primitives("light").Parameters("LightShader").NestedObjects(0).Parameters("color").Parameters("green").value = cColor[1] / 255;
		cLight.Primitives("light").Parameters("LightShader").NestedObjects(0).Parameters("color").Parameters("blue").value = cColor[2] / 255;
		cLight.Primitives("light").Parameters("LightShader").NestedObjects(0).Parameters("factor").value = 0;
		cLight.Primitives("light").Parameters("LightShader").NestedObjects(0).Parameters("shadow").value = true;
	}

	var cSurfaceConstraint = ApplyCns("Surface", cLight, cConstraintParent);

	if(sIBL_XSI_MR_ObjectExists("sIBL_Lights_Target", "sIBL_GUI | No 'sIBL_Lights_Target' Found, Creating It !"))
	{
		var cLightTarget = Application.ActiveSceneRoot.FindChild("sIBL_Lights_Target");
	}
	else
	{
		var cLightTarget = ActiveSceneRoot.AddPrimitive("Null", "sIBL_Lights_Target");
	}

	cParent.AddChild(cLightTarget)

	var cDirectionConstraint = ApplyCns("Direction", cLight, cLightTarget);

	var constraintslist = cLight.Kinematics.Constraints;
	for ( var i=0; i<constraintslist.Count; i++ )
	{
		var cConstraint = constraintslist(i);
		if(cConstraint.Type == "surfcns")
		{
			// U -> V & V -> U Because Of The Invert Normal.
			cConstraint.Parameters("posu").Value = 0.5 + (0.5 - cV);
			cConstraint.Parameters("posv").Value = cU;
		}
		if(cConstraint.Type == "dircns")
		{
			cConstraint.Parameters("dirx").Value = 0;
			cConstraint.Parameters("dirz").Value = -1;
		}
	}
}

function sIBL_XSI_MR_SunCreation(sunU, sunV, sunColor, sunMultiplier, feedbackRadius)
{
	var sIBLGroup = sIBL_XSI_MR_GetSIBLGroup();
	var cFeedback = Application.ActiveSceneRoot.FindChild("sIBL_Feedback");

	sIBL_XSI_MR_GetLight( sIBLGroup, cFeedback, "Infinite", "sIBL_Sun", feedbackRadius/10, physicalSun, sunMultiplier, sunColor, sunU, sunV )
}

function sIBL_XSI_MR_DynamicLightsCreation(dynamicLights, feedbackRadius)
{
	var sIBLGroup = sIBL_XSI_MR_GetSIBLGroup();
	var cFeedback = Application.ActiveSceneRoot.FindChild("sIBL_Feedback");
	var dynamicLights = dynamicLights.split("|");
	for ( var i=0; i<dynamicLights.length; i+=8 )
	{
		sIBL_XSI_MR_GetLight( sIBLGroup, cFeedback, "Spot", "sIBL_DKL_" + dynamicLights[i+1], feedbackRadius/15, false, dynamicLights[i+5], [dynamicLights[i+2], dynamicLights[i+3], dynamicLights[i+4]], dynamicLights[i+6], dynamicLights[i+7] )
	}
}

function sIBL_XSI_MR_ConnectFeedBackToSIBLShaders( cFeedback, connectToBackground, connectToLighting, connectToReflection, cSelectedPassesList)
{
	var cPass = cSelectedPassesList[0];

	if (connectToBackground)
	{
		//AddExpr(cPass + ".sIBL_Background_Environment.transform.StaticKineState.orix", "-" + cFeedback + ".kine.global.rotx", true);
		AddExpr(cPass + ".sIBL_Background_Environment.transform.StaticKineState.oriy", "-" + cFeedback + ".kine.global.roty" + " + 225", true);
		//AddExpr(cPass + ".sIBL_Background_Environment.transform.StaticKineState.oriz", "-" + cFeedback + ".kine.global.rotz" + "*2", true);
	}

	if (connectToLighting)
	{
		//AddExpr(cPass + ".sIBL_Lighting_Environment.transform.StaticKineState.orix", "-" + cFeedback + ".kine.global.rotx", true);
		AddExpr(cPass + ".sIBL_Lighting_Environment.transform.StaticKineState.oriy", "-" + cFeedback + ".kine.global.roty" + " + 225", true);
		//AddExpr(cPass + ".sIBL_Lighting_Environment.transform.StaticKineState.oriz", "-" + cFeedback + ".kine.global.rotz" + "*2", true);
	}

	if (connectToReflection)
	{
		//AddExpr(cPass + ".sIBL_Reflection_Environment.transform.StaticKineState.orix", "-" + cFeedback + ".kine.global.rotx", true);
		AddExpr(cPass + ".sIBL_Reflection_Environment.transform.StaticKineState.oriy", "-" + cFeedback + ".kine.global.roty" + " + 225", true);
		//AddExpr(cPass + ".sIBL_Reflection_Environment.transform.StaticKineState.oriz", "-" + cFeedback + ".kine.global.rotz" + "*2", true);
	}
}

function sIBL_XSI_MR_ActivateFinalGather(cSelectedPassesList)
{
	ActiveSceneRoot.Properties.Item("Ambient Lighting").Parameters("ambience").Parameters("red").value = 0;
	ActiveSceneRoot.Properties.Item("Ambient Lighting").Parameters("ambience").Parameters("green").value = 0;
	ActiveSceneRoot.Properties.Item("Ambient Lighting").Parameters("ambience").Parameters("blue").value = 0;

	SetValue("Views.ViewA.RenderRegion.mentalray.FGEnable,Views.ViewB.RenderRegion.mentalray.FGEnable,Views.ViewC.RenderRegion.mentalray.FGEnable,Views.ViewD.RenderRegion.mentalray.FGEnable", Array(true, true, true, true));

	for (var i = 0; i < cSelectedPassesList.length; i++)
	{
		var cPass = Dictionary.GetObject(cSelectedPassesList[i]);
		cPass.Properties("mental ray").Parameters("FGEnable").value = true;
	}
}

function sIBL_XSI_MR_ActivateColorManagement(createBackground)
{
	Application.Preferences.SetPreferenceValue("Display.color_management_source", 0);
	Application.Preferences.SetPreferenceValue("Display.color_management_render_region", true);
	Application.Preferences.SetPreferenceValue("Display.color_management_render_preview", true);
	Application.Preferences.SetPreferenceValue("Display.color_management_shader_balls", true);
	Application.Preferences.SetPreferenceValue("Display.color_management_ui_colors", true);

	// Adjust Background Color Space Because Of The Color Management.
	if (createBackground)
		ActiveProject.ActiveScene.ImageClips("sIBL_Background_Clip").Parameters("RenderColorProfile").Value = "sRGB";
}

function sIBL_XSI_MR_Update_Ground(feedbackRadius, shadowCatcher, overrideTweaks)
{
	var cGround = sIBL_XSI_MR_GetMatchingObjectsByClassID("{5FC0CCAE-3DC8-11D0-9449-00AA006D3165}", "sIBL_Ground", true);
	if (cGround == 0 && overrideTweaks)
	{
		sIBL_XSI_MR_GroundCreation(feedbackRadius, shadowCatcher);
	}
}

function sIBL_XSI_MR_GroundCreation(feedbackRadius, shadowCatcher)
{
	var sIBLGroup = sIBL_XSI_MR_GetSIBLGroup();

	var cGround = ActiveSceneRoot.AddGeometry("Grid", "MeshSurface", "sIBL_Ground");
	sIBLGroup.AddChild(cGround)

	var cGlobalKinematics = cGround.Kinematics.Global.Parameters;
	cGlobalKinematics("sclx").value = feedbackRadius/8;
	cGlobalKinematics("scly").value = feedbackRadius/8;
	cGlobalKinematics("sclz").value = feedbackRadius/8;

	ResetTransform(cGround, siCtr, siSRT, siXYZ);
	
	if (shadowCatcher) 
	{
		var cGroundMaterial = SICreateMaterial("Shaders/Material/mental images/mip_Matte_Shadow.Preset", "sIBL_Ground_Material", null, null, false);
		
		var cConstantShader = CreateShaderFromPreset("$XSI_DSPRESETS/Shaders/Material/Constant.Preset", cGroundMaterial);
		
		cConstantShader.Parameters("transparency").Parameters("red").value = 1;
		cConstantShader.Parameters("transparency").Parameters("green").value = 1;
		cConstantShader.Parameters("transparency").Parameters("blue").value = 1;
		
		cConstantShader.Parameters("Name").value = "sIBL_Ground_Constant";
			
		SIConnectShaderToCnxPoint(cConstantShader, cGroundMaterial + ".sIBL_Ground_Material.background");

		AssignMaterial(cGroundMaterial + "," + cGround);
	}
}

function sIBL_XSI_MR_ObjectExists( cObject, cErrorMessage )
{
	var cSeekedObject = Application.ActiveSceneRoot.FindChild(cObject);
	if (cSeekedObject != null)
	{
		return true
	}
	else
	{
		Application.LogMessage(cErrorMessage, siWarning);
		return false
	}
}

function sIBL_XSI_AddToDisplayLayer( cLayerName, cObject)
{
    var cSceneLayers = ActiveProject.ActiveScene.Layers;
    var cLayerExists = false;
    
    for (var i = 0; i < cSceneLayers.Count; i++)
    {
        if(cSceneLayers(i).name == cLayerName)
        {
            cLayerExists = true;
            break;
        }
    }
    
    if( !cLayerExists )
    {
        CreateLayer(null, cLayerName, cObject);
    }
    else
    {   
        MoveToLayer("Layers." + cLayerName, cObject);
    }
}

function sIBL_XSI_MR_ScriptEditorVerbose(verboseState)
{
	Application.Preferences.SetPreferenceValue("scripting.cmdlog", verboseState);
	Application.Preferences.SetPreferenceValue("scripting.msglog", verboseState);
	Application.Preferences.SetPreferenceValue("scripting.msglogverbose", verboseState);
}

function sIBL_XSI_MR_AutoInspectState(autoInspectState)
{
	Application.Preferences.SetPreferenceValue("Interaction.autoinspect", autoInspectState);
}

function sIBL_XSI_MR_GetRequestedPropertiesAsCollection(propertyType)
{
	var propertiesList = sIBL_XSI_MR_GetByClassIDAsCollection("{76332571-D242-11d0-B69C-00AA003B3EA6}");

	if (propertiesList.count != 0)
	{
		var propertiesListAsStringArray = sIBL_XSI_MR_GetCollectionAsStringArray(propertiesList);

		var regexPattern = new RegExp(propertyType + "\\w*");

		var requestedProperties = new Array();

		for (var i = 0; i < propertiesListAsStringArray.length; i++)
		{
			var propertyFound = propertiesListAsStringArray[i].match(regexPattern);

			if (propertyFound)
			{
				requestedProperties[requestedProperties.length] = propertiesListAsStringArray[i];
			}
		}

		var requestedPropertiesAsCollection = new ActiveXObject("XSI.Collection");

		if (requestedProperties.length != 0)
		{
			requestedPropertiesAsCollection = sIBL_XSI_MR_GetStringArrayAsCollection(requestedProperties);
		}

		return requestedPropertiesAsCollection;
	}
	else
	{
		return 0;
	}
}

function sIBL_XSI_MR_DeleteRequestedProperties(propertyType)
{
	var requestedProperties = sIBL_XSI_MR_GetRequestedPropertiesAsCollection(propertyType);

	for (var i = 0; i < requestedProperties.count; i++)
	{
		DeleteObj(requestedProperties.item(i));
	}
}

function sIBL_XSI_MR_GetByClassIDAsCollection(currentClassID)
{
	var nodesByClassIDList = new ActiveXObject("XSI.Collection");

	nodesByClassIDList = FindObjects(null, currentClassID);

	return nodesByClassIDList;
}

function sIBL_XSI_MR_GetCollectionAsStringArray(currentCollection)
{
	var collectionObjectsAsString = currentCollection.GetAsText();
	var collectionObjectsList = collectionObjectsAsString.split(",");

	return collectionObjectsList;
}

function sIBL_XSI_MR_GetStringArrayAsCollection(currentStringArray)
{
	var stringArrayAsCollection = new ActiveXObject("XSI.Collection");
	stringArrayAsCollection.SetAsText(currentStringArray);

	return stringArrayAsCollection;
}

function sIBL_XSI_MR_GetMatchingObjectsByClassID(cClassID, cPattern, matchExact)
{
	var objectsByClassIDList = new ActiveXObject("XSI.Collection");
	objectsByClassIDList = FindObjects(null, cClassID);
	cMatchingObjects = new ActiveXObject("XSI.Collection");
	for (var i = 0; i < objectsByClassIDList.Count; i++)
	{
		if(matchExact)
		{
			if (objectsByClassIDList(i).name == cPattern)
				cMatchingObjects.Add(objectsByClassIDList(i));
		}
		else
		{
			if (objectsByClassIDList(i).name.match(cPattern))
				cMatchingObjects.Add(objectsByClassIDList(i));
		}
	}
	return cMatchingObjects;
}