[Template]
Release = @Release | 1.0.1 | String | Template Release
Date = @Date | 10 July 2009 | String | Date
Author = @Author | Kel Solaar | String | Author
EMail = @Email | kelsolaar_fool@hotmail.com | String | Email
Url = @Url | http://my.opera.com/KelSolaar/blog/ | String | Url
Software = @Software | Maya | String | Software
Version = @Version | 2K | String | Version
OutputScript = @OutputScript | sIBL_Maya_Import.mel | String | Output Script
Comment = @Comment | This is Maya 2K VRay Template. | String | Comment

[sIBL File Attributes]
Background|BGfile = @BGfile
Enviroment|EVfile = @EVfile
Enviroment|EVmulti = @EVmulti
Enviroment|EVgamma = @EVgamma
Reflection|REFfile = @REFfile
Reflection|REFmulti = @REFmulti
Reflection|REFgamma = @REFgamma
Sun|SUNu = @SUNu
Sun|SUNv = @SUNv
Sun|SUNcolor = @SUNcolor
Sun|SUNmulti = @SUNmulti
Header|Height = @Height
Header|North = @North
Lights|DynamicLights = @dynamicLights

[Common Attributes]
createBackground = @createBackground | 1 | Boolean | Create Background
createLighting = @createLighting | 1 | Boolean | Create Lighting
createReflection = @createReflection | 1 | Boolean | Create Reflection
createSun = @createSun | 1 | Boolean | Create Sun
createLights = @createLights | 1 | Boolean | Create Dynamic Lights

[Additional Attributes]
createFeedBack = @createFeedBack | 1 | Boolean | Create Feedback
feedbackRadius = @feedbackRadius | 500 | Float | Feedback Radius
createGround = @createGround | 1 | Boolean | Create Ground
hideLights = @hideLights | 1 | Boolean | Hide Lights
activateIndirectIllumination = @activateIndirectIllumination | 1 | Boolean | Activate Indirect Illumination
activateLinearWorkflow = @activateLinearWorkflow | 1 | Boolean | Activate Linear Workflow

[Remote Connection]
ConnectionType = @ConnectionType | Socket | String | Connection Type
ExecutionCommand = @ExecutionCommand | source "$loaderScriptPath"; | String | ExecutionCommand
DefaultAddress = @DefaultAddress | 127.0.0.1 | Integer | Default Address
DefaultPort = @DefaultPort | 2048 | Integer | Default Port

[Script]
// @OutputScript - @Release For @Software @Version
// Author : @Author
// EMail : @Email
// Homepage : @Url
// Template Last Modified : @Date
// sIBL_Framework
string $cBackgroundFilePath = "@BGfile";
string $cLightingFilePath = "@EVfile";
float $lightingMultiplier = @EVmulti;
float $lightingGamma = @EVgamma;
string $cReflectionFilePath = "@REFfile";
float $reflectionMultiplier = @REFmulti;
float $reflectionGamma = @REFgamma;
float $sunU = @SUNu;
float $sunV = @SUNv;
float $sunColor[] = {@SUNcolor};
float $sunMultiplier = @SUNmulti;
float $Height = @Height;
float $North = @North;
string $dynamicLights = "@dynamicLights";
int $createBackground = @createBackground;
int $createLighting = @createLighting;
int $createReflection = @createReflection;
int $createSun = @createSun;
int $createLights = @createLights;
int $createFeedBack = @createFeedBack;
float $feedbackRadius = @feedbackRadius;
int $createGround = @createGround;
int $hideLights = @hideLights;
int $activateIndirectIllumination = @activateIndirectIllumination;
int $activateLinearWorkflow = @activateLinearWorkflow;

sIBL_Maya_VRay_Setup($cBackgroundFilePath,
		$cLightingFilePath,
		$lightingMultiplier,
		$lightingGamma,
		$cReflectionFilePath,
		$reflectionMultiplier,
		$reflectionGamma,
		$sunU,
		$sunV,
		$sunColor,
		$sunMultiplier,
		$Height,
		$North,
		$dynamicLights,
		$createBackground,
		$createLighting,
		$createReflection,
		$createSun,
		$createLights,
		$createFeedBack,
		$createGround,
		$feedbackRadius,
		$hideLights,
		$activateIndirectIllumination,
		$activateLinearWorkflow);

global proc sIBL_Maya_VRay_Setup(string $cBackgroundFilePath,
			string $cLightingFilePath,
			float $lightingMultiplier,
			float $lightingGamma,
			string $cReflectionFilePath,
			float $reflectionMultiplier,
			float $reflectionGamma,
			float $sunU,
			float $sunV,
			float $sunColor[],
			float $sunMultiplier,
			float $Height,
			float $North,
			string $dynamicLights,
			int $createBackground,
			int $createLighting,
			int $createReflection,
			int $createSun,
			int $createLights,
			int $createFeedBack,
			int $createGround,
			float $feedbackRadius,
			int $hideLights,
			int $activateIndirectIllumination,
			int $activateLinearWorkflow)
{
	print("sIBL_GUI | Starting sIBL File Import !\n");

	sIBL_Maya_VRay_ActivateVRay();

	sIBL_Maya_VRay_Environment_Deletion();

	if ($hideLights)
		sIBL_Maya_VRay_HideLights();

	sIBL_Maya_VRay_Environment_Creation($createBackground, $createLighting, $createReflection, $cBackgroundFilePath, $cLightingFilePath, $cReflectionFilePath);

	if ($createFeedBack)
	{
		sIBL_Maya_VRay_Feedback_Creation($cBackgroundFilePath, $feedbackRadius);
	}

	if (sIBL_Maya_VRay_ObjectExists( "sIBL_Feedback", "sIBL_GUI | No Feedback Found, Aborting !\n"))
	{
		if ($sunU != -1 && $sunV != -1)
		{
			if ($createSun)
			{
				sIBL_Maya_VRay_Sun_Creation($sunU, $sunV, $sunColor, $sunMultiplier, $feedbackRadius );
			}
		}

		if ($dynamicLights != -1)
		{
			if ($createLights)
			{
				sIBL_Maya_VRay_DynamicLights_Creation($dynamicLights, $feedbackRadius);
			}
		}

		string $cFeedback = sIBL_Maya_VRay_GetObject("sIBL_Feedback");
		sIBL_Maya_VRay_ConnectFeedBackToSIBLShaders($cFeedback, $createBackground, $createLighting, $createReflection);

		if($createGround)
			sIBL_Maya_VRay_CreateGround($feedbackRadius);

		if ($activateIndirectIllumination)
			sIBL_Maya_VRay_ActivateIndirectIllumination();

		if ($activateLinearWorkflow)
			sIBL_Maya_VRay_ActivateLinearWorkflow();

		print("sIBL_GUI | sIBL File Import Finished !\n");
		}
}

global proc sIBL_Maya_VRay_HideLights()
{
	SelectAllLights();
	if(size(`ls -sl`) != 0)
		HideSelectedObjects();
}

global proc sIBL_Maya_VRay_DeleteType( string $cType, string $cFilter)
{
		string $cTypesList[] = `ls -type $cType $cFilter`;
		if(size($cTypesList) != 0)
			delete($cTypesList);
}

global proc sIBL_Maya_VRay_Environment_Deletion()
{
	// sIBL Transform Group Deletion.
	string $sceneSIBLGroup[] = `ls -fl "sIBL"`;
	if ($sceneSIBLGroup[0] != "")
	{
		delete($sceneSIBLGroup);
	}

	// sIBL Texture Files Deletion.
	sIBL_Maya_VRay_DeleteType("file", "sIBL*");

	// sIBL place2dTexture Shaders Deletion.
	sIBL_Maya_VRay_DeleteType("place2dTexture", "sIBL*");

	// sIBL Vray Placements Deletion.
	sIBL_Maya_VRay_DeleteType("VRayPlaceEnvTex", "sIBL*");

	// sIBL Vray VRayObjectProperties Deletion.
	sIBL_Maya_VRay_DeleteType("VRayObjectProperties", "sIBL*");

	// sIBL lambert Shaders Deletion.
	sIBL_Maya_VRay_DeleteType("lambert", "sIBL*");
}

global proc sIBL_Maya_VRay_CreateEnvironmentTexturesBranch(string $cSlot, string $cFilePath, string $cPrefix)
{
	string $cFile = `createNode file`;
	connectAttr -f ($cFile + ".outColor") $cSlot;

	string $cVrayPlacement = `createNode VRayPlaceEnvTex`;
	setAttr ($cVrayPlacement + ".mappingType") 2;

	connectAttr -f ($cVrayPlacement + ".outUV") ($cFile + ".uvCoord");

	setAttr -type "string" ($cFile + ".fileTextureName") $cFilePath;

	rename $cFile ($cPrefix + "_" + `nodeType $cFile`);
	rename $cVrayPlacement ($cPrefix + "_" + `nodeType $cVrayPlacement`);
}

global proc sIBL_Maya_VRay_Environment_Creation(int $createBackground, int $createLighting, int $createReflection, string $cBackgroundFilePath, string $cLightingFilePath, string $cReflectionFilePath)
{
	setAttr "vraySettings.cam_overrideEnvtex" 1;

	if ($createBackground)
	{
		sIBL_Maya_VRay_CreateEnvironmentTexturesBranch("vraySettings.cam_envtexBg", $cBackgroundFilePath, "sIBL_Background");
	}

	if ($createLighting)
	{
		sIBL_Maya_VRay_CreateEnvironmentTexturesBranch("vraySettings.cam_envtexGi", $cLightingFilePath, "sIBL_Lighting");
	}

	if ($createReflection)
	{
		sIBL_Maya_VRay_CreateEnvironmentTexturesBranch("vraySettings.cam_envtexReflect", $cReflectionFilePath, "sIBL_Reflection");
	}
}

global proc string sIBL_Maya_VRay_GetSIBLGroup()
{
	string $cSIBLGroup[] = `ls -fl "sIBL"`;
	if ($cSIBLGroup[0] == "")
	{
		$cSIBLGroup[0] = `createNode "transform" -n "sIBL"`;

		string $cLocksList[] = { "tx", "ty", "tz", "rx", "ry", "rz", "sx", "sy", "sz" };
		for( $cLock in $cLocksList )
			setAttr -lock true -keyable false ($cSIBLGroup[0] + "." + $cLock);
	}

	return $cSIBLGroup[0];
}

global proc string sIBL_Maya_VRay_FeedbackGeometry_Creation(float $feedbackRadius)
{
 	string $cFeedback[] = `sphere -name "sIBL_Feedback"`;
	rebuildSurface -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kc 0 -su 4 -du 3 -sv 8 -dv 3 -tol 0.01 -fr 0  -dir 2 $cFeedback;
	delete -ch;

	setAttr ($cFeedback[0] + ".scaleZ") (-1);
	makeIdentity -apply true -t 0 -r 0 -s 1 -n 0 $cFeedback[0];

	string $cScaleAttributesList[] = {"scaleX", "scaleY", "scaleZ"};
	for( $cScaleAttribute in $cScaleAttributesList )
		setAttr ($cFeedback[0] + "." + $cScaleAttribute) $feedbackRadius;

	setAttr ($cFeedback[0] + ".rotateZ") 90;

	string $cLocksList[] = { "tx", "ty", "tz", "ry", "rz" };
	for( $cLock in $cLocksList )
		setAttr -lock true -keyable false ($cFeedback[0] + "." + $cLock);

	return $cFeedback[0];
}

global proc sIBL_Maya_VRay_Feedback_Creation(string $cBackgroundFilePath, float $feedbackRadius)
{
 	string $sIBLGroup = sIBL_Maya_VRay_GetSIBLGroup();
	string $cFeedback = sIBL_Maya_VRay_FeedbackGeometry_Creation($feedbackRadius);
	parent $cFeedback $sIBLGroup ;

	string $cLambertShader = `shadingNode -asShader lambert`;
	string $cShadingEngine = `sets -renderable true -noSurfaceShader true -empty`;
	sets -renderable true -noSurfaceShader true -empty -name $cShadingEngine;
	connectAttr -f ($cLambertShader + ".outColor") ($cShadingEngine + ".surfaceShader");

	string $cFile = `createNode file`;
	if (!`attributeExists "resolution" $cFile`)
		addAttr -ln "resolution" -at long $cFile;
 	setAttr  ($cFile + ".resolution") 2048;

	setAttr -type "string" ($cFile + ".fileTextureName") $cBackgroundFilePath;

	connectAttr -f ($cFile + ".outColor") ($cLambertShader + ".color");

	string $cPlace2DTexture = `createNode place2dTexture`;

	connectAttr -f ($cPlace2DTexture + ".outUV") ($cFile + ".uvCoord");
	connectAttr -f ($cPlace2DTexture + ".outUvFilterSize") ($cFile + ".uvFilterSize");

	string $cUVAttributes[] = { "coverage", "translateFrame", "rotateFrame", "mirrorU", "mirrorV", "stagger", "wrapU", "wrapV" , "repeatUV" , "vertexUvOne" , "vertexUvTwo" , "vertexUvThree" , "vertexCameraOne", "noiseUV", "offset", "rotateUV"};
	for( $cUVAttribute in $cUVAttributes )
		connectAttr -f ($cPlace2DTexture + "." + $cUVAttribute) ($cFile + "." + $cUVAttribute);

	setAttr ($cPlace2DTexture + ".rotateFrame") 90;

	select -r $cFeedback;
	sets -e -forceElement $cShadingEngine;

	string $cVRayObjPropertiesNode = `createNode "VRayObjectProperties"`;
	connectAttr -f ($cFeedback + ".instObjGroups[0]") ($cVRayObjPropertiesNode + ".dnSetMembers[0]");
	string $cAttributesList[] = {"generateGI", "receiveGI", "generateCaustics", "receiveCaustics", "giVisibility", "reflectionVisibility", "refractionVisibility" };
	for( $cAttribute in $cAttributesList )
		setAttr ($cVRayObjPropertiesNode + "." + $cAttribute) 0;

	$cAttributesList = {"castsShadows", "receiveShadows", "motionBlur", "primaryVisibility", "smoothShading", "visibleInReflections", "visibleInRefractions" };
	for( $cAttribute in $cAttributesList )
		setAttr ($cFeedback + "." + $cAttribute) 0;

	rename $cLambertShader ("sIBL_Feedback_" + `nodeType $cLambertShader`);
	rename $cShadingEngine ("sIBL_Feedback_" + `nodeType $cShadingEngine`);
	rename $cFile ("sIBL_Feedback_" + `nodeType $cFile`);
	rename $cVRayObjPropertiesNode ("sIBL_" + `nodeType $cVRayObjPropertiesNode`);
	rename $cPlace2DTexture ("sIBL_Feedback_" + `nodeType $cPlace2DTexture`);
}

global proc string sIBL_Maya_VRay_GetLigthsTargetLocator()
{
	string $cSIBL_Lights_Target_Locator[] = `ls -fl "sIBL_Lights_Target_Locator"`;

	if ($cSIBL_Lights_Target_Locator[0] == "")
	{
		string $sIBLGroup = sIBL_Maya_VRay_GetSIBLGroup();

		$cSIBL_Lights_Target_Locator = `spaceLocator`;
		parent $cSIBL_Lights_Target_Locator[0] $sIBLGroup ;

		rename $cSIBL_Lights_Target_Locator[0] "sIBL_Lights_Target_Locator";
	}

	$cSIBL_Lights_Target_Locator = `ls -fl "sIBL_Lights_Target_Locator"`;
	return $cSIBL_Lights_Target_Locator[0];
}

global proc sIBL_Maya_VRay_GetLight( string $cLigthType, string $cLightName, float $cScale, float $cColor[], float $cIntensity, float $cU, float $cV )
{
	string $sIBLGroup = sIBL_Maya_VRay_GetSIBLGroup();
	string $cFeedback[] = `ls -fl "sIBL_Feedback"`;

	string $cLight = `shadingNode -asLight $cLigthType`;

	setAttr ($cLight + ".locatorScale") $cScale;
	setAttr -type double3 ($cLight + ".color") ($cColor[0]/255) ($cColor[1]/255) ($cColor[2]/255) ;
	setAttr ($cLight + ".intensity") $cIntensity;
	setAttr ($cLight + ".useRayTraceShadows") 1;
	parent $cLight $sIBLGroup ;

	string $cPointOnSurfaceInfo = `createNode pointOnSurfaceInfo`;
	connectAttr -f ($cFeedback[0] + "Shape.worldSpace[0]") ($cPointOnSurfaceInfo + ".inputSurface");
	connectAttr -f ($cPointOnSurfaceInfo + ".position") ($cLight + ".translate");

	setAttr ($cPointOnSurfaceInfo + ".parameterU") (0.5 + (0.5 - $cV));
	setAttr ($cPointOnSurfaceInfo + ".parameterV") (0.5 + (0.5 - $cU));

	string $cSIBL_Lights_Target_Locator = sIBL_Maya_VRay_GetLigthsTargetLocator();

	select $cSIBL_Lights_Target_Locator;
	select -tgl $cLight;
	string $cConstraint[] = `aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 0 -1 -upVector 0 1 0 -worldUpType "vector" -worldUpVector 0 1 0`;

	rename $cLight $cLightName;
	rename $cPointOnSurfaceInfo ($cLightName + "_PointOnSurfaceInfo");
	rename $cConstraint[0] ($cLightName + "_AimConstraint");
}

global proc sIBL_Maya_VRay_Sun_Creation(float $sunU, float $sunV, float $sunColor[], float $sunMultiplier, float $feedbackRadius )
{
	sIBL_Maya_VRay_GetLight("directionalLight", "sIBL_Sun", ($feedbackRadius / 10), $sunColor, $sunMultiplier, $sunU, $sunV);
}

global proc sIBL_Maya_VRay_DynamicLights_Creation(string $compactedDynamicLights, float $feedbackRadius)
{
	string $sIBLGroup = sIBL_Maya_VRay_GetSIBLGroup();
	string $cFeedback[] = `ls -fl "sIBL_Feedback"`;

	string $dynamicLights[];
	tokenize($compactedDynamicLights, "|", $dynamicLights);

	for($i=0; $i<size($dynamicLights); $i+=8)
	{
		float $cColor[] = {float($dynamicLights[$i+2]), float($dynamicLights[$i+3]), float($dynamicLights[$i+4])};
		sIBL_Maya_VRay_GetLight("spotLight", "sIBL_DKL_" + $dynamicLights[$i+1], ($feedbackRadius / 15), $cColor, float($dynamicLights[$i+5]), float($dynamicLights[$i+6]), float($dynamicLights[$i+7]));
	}
}

global proc sIBL_Maya_VRay_ConnectFeedBackToSIBLShaders(string $cFeedback, int $connectToBackground, int $connectToLighting, int $connectToReflection)
{
	if ($connectToBackground)
	{
		expression -name "sIBL_Background_Rotate_Expression" -s ("sIBL_Background_VRayPlaceEnvTex.horRotation = -" + $cFeedback + ".rotateX + 90;");
	}

	if ($connectToLighting)
	{
		expression -name "sIBL_Lighting_Rotate_Expression" -s ("sIBL_Lighting_VRayPlaceEnvTex.horRotation = -" + $cFeedback + ".rotateX + 90;");
	}

	if ($connectToReflection)
	{
		expression -name "sIBL_Reflection_Rotate_Expression" -s ("sIBL_Reflection_VRayPlaceEnvTex.horRotation = -" + $cFeedback + ".rotateX + 90;");
	}
}

global proc sIBL_Maya_VRay_ActivateIndirectIllumination()
{
	setAttr "defaultRenderGlobals.enableDefaultLight" 0;
	setAttr "vraySettings.giOn" 1;
}

global proc sIBL_Maya_VRay_ActivateLinearWorkflow()
{
	setAttr "vraySettings.cmap_gamma" 2.2;
	setAttr "vraySettings.cmap_affectBackground" 0;
}

global proc sIBL_Maya_VRay_CreateGround(float $feedbackRadius)
{
	string $sIBLGroup = sIBL_Maya_VRay_GetSIBLGroup();
	string $cGround[] = `nurbsPlane`;
	delete -ch;

	setAttr ($cGround[0] + ".rotateZ") 90;
	makeIdentity -apply true -t 0 -r 0 -s 1 -n 0 $cGround[0];

	string $cScaleAttributesList[] = {"scaleX", "scaleY", "scaleZ"};
	for( $cScaleAttribute in $cScaleAttributesList )
		setAttr ($cGround[0] + "." + $cScaleAttribute) ($feedbackRadius*2);

	parent $cGround[0] $sIBLGroup ;

	rename $cGround[0] "sIBL_Ground";
}

global proc sIBL_Maya_VRay_ActivateVRay()
{
	if (`pluginInfo -q -loaded "vrayformaya"` == 0)
	{
		loadPlugin("vrayformaya");
	}
	setAttr -type "string" defaultRenderGlobals.currentRenderer "vray";
	vrayCreateVRaySettingsNode();
}

global proc string[] sIBL_Maya_VRay_GetShapes(string $xform)
{
   string $shapes[];
   $shapes[0] = $xform;
   if ("transform" == `nodeType $xform`)
      $shapes = `listRelatives -fullPath -shapes $xform`;
   return $shapes;
}

global proc string sIBL_Maya_VRay_GetTransform(string $shape)
{
   string $transform = "";
   if ("transform" != `nodeType $shape`)
   {
      string $parents[] = `listRelatives -fullPath -parent $shape`;
      $transform = $parents[0];
   }
   return $transform;
}

global proc int sIBL_Maya_VRay_ObjectExists(string $cObject, string $cErrorMessage)
{
	string $cObjectList[] = `ls -fl $cObject`;
	if ($cObjectList[0] != "")
	{
		return 1;
	}
	else
	{
		error($cErrorMessage);
		return 0;
	}
}

global proc string sIBL_Maya_VRay_GetObject(string $cObject)
{
	string $cList[] = `ls -fl $cObject`;
	return $cList[0];
}