[Template]
Release = @Release | 0.9.5 | String | Template Release
Date = @Date | 26 August 2008 | String | Date
Author = @Author | Dschaga | String | Author
EMail = @Email | christian@cgtechniques.com | String | Email
Url = @Url | http://my.opera.com/KelSolaar/blog/ | String | Url
Software = @Software | 3ds Max  | String | Software
Version = @Version | 2008+ | String | Version
OutputScript = @OutputScript | sIBL_3dsmax_Import.ms | String | Output Script
Comment = @Comment | This is 3dsmax 2K Template. | String | Comment

[sIBL File Attributes]
SUNu = @SUNu
SUNv = @SUNv
SUNcolor = @SUNcolor
SUNmulti = @SUNmulti
BGfile = @BGfile
BGmap = @BGmap
BGu = @BGu
BGv = @BGv
EVfile = @EVfile
EVmap = @EVmap
EVmulti = @EVmulti
EVgamma = @EVgamma
EVu = @EVu
EVv = @EVv
REFfile = @REFfile
REFmap = @REFmap
REFmulti = @REFmulti
REFgamma = @REFgamma
REFu = @REFu
REFv = @REFv

[Common Attributes]
createBackground = @createBackground | 1 | Boolean | Create Background
createLighting = @createLighting | 1 | Boolean | Create Lighting
createReflection = @createReflection | 1 | Boolean | Create Reflection
createSun = @createSun | 1 | Boolean | Create Sun
createLights = @createLights | 1 | Boolean | Create Dynamic Lights

[Additional Attributes]
north = @north | 0 | Float | North
sundistance = @sundistance | 100 | Float | Sundistance

[Remote Connection]
ConnectionType = @ConnectionType | Win32 | String
TargetApplication = @TargetApplication | MAX.Application | String
ExecutionCommand = @ExecutionCommand | fileIn ("$loaderScriptPath") | String

[Script]
/*
@OutputScript - @Release For @Software @Version
Author : @Author
EMail : @Email
Homepage : @Url
Template Last Modified : @Date
sIBL_Framework
*/

SUNx = @SUNu
SUNy = @SUNv
SUNcolor = "@SUNcolor"
SUNmulti = @SUNmulti
BGfile = "@BGfile"
BGmap = @BGmap
BGu = @BGu
BGv = @BGv
EVfile = "@EVfile"
EVmap = @EVmap
EVmulti = @EVmulti
EVgamma = @EVgamma
EVu = @EVu
EVv = @EVv
REFfile = "@REFfile"
REFmap = @REFmap
REFmulti = @REFmulti
REFgamma = @REFgamma
REFu = @REFu
REFv = @REFv
sc = @sundistance
n = @north

createBackground = "@createBackground"
createLighting = "@createLighting"
createReflection = "@createReflection"
createSun = "@createSun"


global a = bitmaptexture()
global b = bitmaptexture()
global c = bitmaptexture()


	--------------------------------------
	-- FIRST ..... CLEAN THE SCENE
	--------------------------------------


		--sIBL SUN
		if ($sIBL_sun != undefined) then
		(
			--delete #($sIBL_sun, $target01)
			delete #($sIBL_sun)


			-- delete old floorplane
			if ($Floor_matte != undefined) then (delete $Floor_matte)
			-- BGmap
			environmentMap = undefined
		)


	-----------------------------------------
	--	THE SUN
	-----------------------------------------

		if  (createSun  == "1" AND SUNmulti > 0) then
		(
			/*
			-- read parameter for the Sun:
			SUNmulti = GetINISetting sIBLfile "Sun" "SUNmulti"
			SUNcolor = GetINISetting sIBLfile "Sun" "SUNcolor"
			SUNx = (GetINISetting sIBLfile "Sun" "SUNu") as float
			SUNy = (GetINISetting sIBLfile "Sun" "SUNv" ) as float
			*/

			SUNx = (SUNx + n + 0.75)
			cc = filterstring SUNcolor ","

			sZ = sc* (sin((0.5 - SUNy)*180))
			dR = cos((0.5 - SUNy)*180)
			sX = sc* ((cos(SUNx*360)) * dR)
			sY = sc* ((sin(SUNx*360)) * dR)*-1
			sIBL_sun = TargetDirectionallight name:"sIBL_Sun" rgb:(color (cc[1] as float) (cc[2] as float) (cc[3] as float)) castShadows:on shadowColor:(color 0 0 0) multiplier:(SUNmulti as float) contrast:0 softenDiffuseEdge:0 nearAttenStart:0 nearAttenEnd:40 farAttenStart:80 farAttenEnd:200 decayRadius:40 atmosOpacity:100 atmosColorAmt:100 shadowMultiplier:1 hotSpot:43 falloff:sc aspect:1 pos:[(sx as float),(sy as float),(sz as float)] target:(Targetobject transform:(matrix3 [1,0,0] [0,1,0] [0,0,1] [0,0,0]))
		)

	--------------------------------------------------------------
	-- BACKGROUND image
	-- "a" is a objectholder for the enviroment map,
	-- this object have additonal variables which i can use with a.variable
	--------------------------------------------------------------

		if  (createBackground == "1") then
		(

			--
			--
			-- the scripts offer the BGimagemap as variable "a"
			--
			--
			if (a == undefined) then a = Bitmaptexture()
			environmentMap = a
			a.filename = (BGfile)
			a.name = "sIBL-BGmap"
			a.coordinates.mappingtype = 1

			-- here we define the projection type
			-- 0 - Spherical; 1 - Cylindrical; 2 - Shrink-Wrap; 3 - Screen
			a.coordinates.mapping = ((BGmap as integer) - 1)


			-- uv mapping writing
			a.coordinates.U_Offset = (BGu as float) + n
			a.coordinates.V_Offset = BGv as float
			a.coordinates.U_Tiling = -1.0

		)


	-------------------------------------
	-- read parameters for the ENViromentfile:
	-------------------------------------

		if  (createLighting == "1") then
		(


			--
			--
			-- the scripts offer the ENVIROMENTimagemap as variable "b"
			--
			--
			if (b == undefined) then b = bitmaptexture()
			b.filename = (EVfile)
			b.name = "sIBL-EVmap"
			b.coordinates.mappingtype = 1

			-- here we define the projection type
			-- 0 - Spherical; 1 - Cylindrical; 2 - Shrink-Wrap; 3 - Screen
			b.coordinates.mapping = ((EVmap as integer) - 1)

			-- uv mapping writing
			b.coordinates.U_Offset = (EVu as float) + n
			b.coordinates.V_Offset = EVv as float
			b.coordinates.U_Tiling = -1.0

		)

	------------------------------------------
	-- read parameters fot the REFlectionfile:
	------------------------------------------

		if  (createReflection == "1") then
		(

			--
			--
			-- the scripts offer the REFLECTIONimagemap as variable "c"
			--
			--
			if (c == undefined) then c = bitmaptexture()
			c.filename = (REFfile)
			c.name = "sIBL-REFmap"
			c.coordinates.mappingtype = 1

			-- here we define the projection type
			-- 0 - Spherical; 1 - Cylindrical; 2 - Shrink-Wrap; 3 - Screen
			c.coordinates.mapping = ((REFmap as integer) - 1)

			-- uv mapping writing
			c.coordinates.U_Offset = (REFu as float) + n
			c.coordinates.V_Offset = REFv as float
			c.coordinates.U_Tiling = -1.0


			for m in sceneMaterials do
			(
				try
				m.texmap_environment = c
				catch()

				try
				m.reflectionMap = c
				catch()
			)

		)

